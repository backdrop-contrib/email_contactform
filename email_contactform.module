<?php
/**
 * @file
 * Provides a contact form formatter for email field type.
 */

/**
 * Implements hook_menu().
 */
function email_contactform_menu() {
  $items['contact/%/%/%'] = array(
    'title' => 'Email Contact Form',
    'page callback' => 'email_contactform_mail_page',
    'page arguments' => array(1, 2, 3),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/content/email'] = array(
    'title' => 'Email Contact Form',
    'description' => 'Administer flood control settings for email contact forms',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('email_contactform_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'email_contactform.admin.inc'
  );

  return $items;
}

/**
 * Implements hook_field_formatter_info().
 *
 */
function email_contactform_field_formatter_info() {
  $formats = array(
    'email_contact' => array(
      'label' => t('Link to contact form'),
      'description' => t('Display a link to a contact form.'),
      'field types' => array('email'),
    ),
    'email_contact_form' => array(
      'label' => t('Contact form'),
      'description' => t('Display a contact form.'),
      'field types' => array('email'),
      'settings' => array('redirection_to' => 'current', 'custom_path' => ''),
    ),
  );

  return $formats;
}

/**
 * Implements hook_field_formatter_view().
 */
function email_contactform_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $element = array();

  switch ($display['type']) {

    case 'email_contact':
      $ids = entity_extract_ids($object_type, $object);
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => l(t('Contact person by email'), 'contact/' . $object_type . '/' . $ids[0] . '/' . $instance['field_name']));
        // Since email is always sent to first item's email, break after any email address found.
        break;
      }
      break;

    case 'email_contact_form':
      $ids = entity_extract_ids($object_type, $object);

      foreach ($items as $delta => $item) {
        // Verify that the email address is not empty
        if (!empty($item['email'])) {
          if (!flood_is_allowed('email', variable_get('email_hourly_threshold', 3))) {
            $element[$delta]['#markup'] = t("You cannot send more than %number messages per hour. Please try again later.", array('%number' => variable_get('email_hourly_threshold', 3)));
          }
          else {
            $element[$delta] = backdrop_get_form('email_contactform_form', $object_type, $ids[0], $instance['field_name'], $item['email'], $settings);
          }
        }
        // Since email is always sent to first item's email, break after any email address found.
        break;
      }
      break;

  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_form();
 */
function email_contactform_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'email_contact_form') {
    $element['redirection_to'] = array(
      '#title' => t('Redirection destination after the contact form submit'),
      '#type' => 'radios',
      '#options' => array(
        'current' => t('To the current page'),
        'front' => t('To the frontpage'),
        'custom' => t('To a custom path'),
      ),
      '#default_value' => $settings['redirection_to'],
      '#required' => TRUE,
    );

    $element['custom_path'] = array(
      '#title' => t('Redirection path'),
      '#type' => 'textfield',
      '#states' => array(
        'visible' => array(
          ':input[name="fields[' . $field['field_name'] . '][settings_edit_form][settings][redirection_to]"]' => array('value' => 'custom'),
        ),
      ),
      '#default_value' => $settings['custom_path'],
      '#element_validate' => array('_email_contactform_field_formatter_settings_form_validate')
    );
  }

  return $element;
}

/**
 * Helper function: validates the custom path.
 */
function _email_contactform_field_formatter_settings_form_validate($element, &$element_state) {
  $element_name = $element_state['triggering_element']['#field_name'];
  $settings = $element_state['input']['fields'][$element_name]['settings_edit_form']['settings'];

  if ('custom' == $settings['redirection_to']) {
    if (empty($element['#value'])) {
      //form_set_error($element['#name'], t('The custom path must given!'));
      form_set_error('fields][' . $element_name . '][settings_edit_form][settings', t('The custom path must given!'));
    }
    if (!valid_url($element['#value'])) {
      form_set_error('fields][' . $element_name . '][settings_edit_form][settings', t('The given url is not valid!'));
    }
  }
}

/**
 * Implements hook_field_formatter_settings_summary()
 */
function email_contactform_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if ($display['type'] == 'email_contact_form') {
    $redir = t('Redirection is not set');
    if (!empty($settings['redirection_to'])) {
      switch ($settings['redirection_to']) {
        case 'current':
          $redir = ('Redirection destination is the current page after submit.');
          break;
        case 'front':
          $redir = t('Redirection destination is the site front page after submit.');
          break;
        case 'custom':
          $redir = t('Redirection destination is a custom url (@url) after submit.', array('@url' => $settings['custom_path']));
          break;
      }
    }
    $summary .= '<br>' . $redir;
  }

  return $summary;
}

/**
 * Access callback for the email contact page.
 *
 * Checks whether the current user has view access to the entity. Access checks
 * are performed for the fieldable core entity types, including nodes, users,
 * comments and taxonomy terms. Furthermore entity types using Entity API's
 * access system are supported. For custom entity types that are not using the
 * Entity API, at least the access content permission is checked in the menu
 * access callback.
 *
 * This function is called within the email page callback, as it takes care of
 * loading the entity itself. If the entity is found, access checks are
 * performed with this function.
 *
 * @param $entity_type
 *   The entity type
 * @param $entity
 *   The entity for which the access should be checked
 * @param $field_info
 *   The field info for the email field.
 *
 * @return TRUE if the current user has view access, otherwise FALSE.
 */
function email_contactform_mail_page_access($entity_type, $entity, $field_info) {
  // Check for field access.
  if (!field_access('view', $field_info, $entity_type, $entity)) {
    return FALSE;
  }

  // Check the access for fieldable core entities, including nodes, users,
  // comments and taxonomy terms.
  if ($entity_type == 'node') {
    return node_access('view', $entity);
  }
  elseif ($entity_type == 'user') {
    global $user;
    if ($entity->uid == $user->uid && $entity->uid) {
      return TRUE;
    }
    if (user_access('administer users') || (user_access('access user profiles') && $entity->status)) {
      return TRUE;
    }
    return FALSE;
  }
  elseif ($entity_type == 'comment') {
    return comment_access('view', $entity);
  }
  elseif ($entity_type == 'taxonomy_term') {
    if (user_access('administer taxonomy') || user_access('access content')) {
      return TRUE;
    }
    return FALSE;
  }

  // Use Entity API for checking the view access for non-core entity types, if
  // the module is installed.
  if (module_exists('entity')) {
    return entity_access('view', $entity_type, $entity);
  }
  return TRUE;
}

/**
 * The contact form page.
 */
function email_contactform_mail_page($object_type, $object_id, $field_name) {
  if (!is_numeric($object_id)) {
    return MENU_NOT_FOUND;
  }
  // Verify this is an email field.
  $field_info = field_info_field($field_name);
  if (!isset($field_info) || $field_info['type'] != 'email') {
    return MENU_NOT_FOUND;
  }

  // Check that the entity exists.
  $objects = entity_load($object_type, array($object_id));
  if (!isset($objects[$object_id])) {
    return MENU_NOT_FOUND;
  }
  $object = $objects[$object_id];

  // Check that the entity has the email field.
  if (!isset($object->$field_name)) {
    return MENU_NOT_FOUND;
  }

  // Check if the current user has access to the entity and to the field.
  if (!email_contactform_mail_page_access($object_type, $object, $field_info)) {
    return MENU_ACCESS_DENIED;
  }

  // Use the first email address as receiver.
  $field = array_pop($object->$field_name);
  foreach ($field as $delta => $item) {
    if (!empty($item['email'])) {
      $email = $item['email'];
      break;
    }
  }

  // Verify that the email address is not empty.
  if (empty($email)) {
    return MENU_NOT_FOUND;
  }

  if (!flood_is_allowed('email', config_get('email_contactform.settings', 'hourly_threshold'))) {
    return t("You cannot send more than %number messages per hour. Please try again later.", array('%number' => config_get('email_contactform.settings', 'hourly_threshold')));
  }

  return backdrop_get_form('email_contactform_form', $object_type, $object_id, $field_name, $email);
}

/**
 * Contact form
 */
function email_contactform_form($form, $form_state, $object_type, $object_id, $field_name, $email, $widget_settings = array()) {
  global $user;

  $form['object_id'] = array(
    '#type' => 'value',
    '#value' => $object_id,
  );
  $form['object_type'] = array(
    '#type' => 'value',
    '#value' => $object_type,
  );
  $form['field_name'] = array(
    '#type' => 'value',
    '#value' => $field_name,
  );
  $form['email'] = array(
    '#type' => 'value',
    '#value' => $email,
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Your name'),
    '#maxlength' => 255,
    '#default_value' => $user->uid ? $user->name : '',
    '#required' => TRUE,
  );
  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Your e-mail address'),
    '#maxlength' => 255,
    '#default_value' => $user->uid ? $user->mail : '',
    '#required' => TRUE,
  );
  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send e-mail'),
    '#validate' => array('email_contactform_form_validate'),
    '#submit' => array('email_contactform_form_submit'),
  );

  if (!isset($form_state['widget_settings'])) {
    $form_state['widget_settings'] = $widget_settings;
  }

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function email_contactform_form_email_contactform_form_alter(&$form, &$form_state) {
  if (module_exists('honeypot')) {
    $form_settings = config_get('honeypot.settings', 'form_settings');
    if (in_array('honeypot_form_email_contactforms', $form_settings) && $form_settings['honeypot_form_email_contactforms']) {
      honeypot_add_form_protection($form, $form_state, array('honeypot', 'time_restriction'));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function email_contactform_form_honeypot_admin_form_alter(&$form, &$form_state) {
  $default = FALSE;
  $form_settings = config_get('honeypot.settings', 'form_settings');
  if (in_array('honeypot_form_email_contactforms', $form_settings)) {
    $default = $form_settings['honeypot_form_email_contactforms'];
  }

  $form['enabled_forms']['email_contactforms'] = array('#markup' => '<h5>' . t('Email field contact forms') . '</h5>');
  $form['enabled_forms']['honeypot_form_email_contactforms'] = array(
    '#type' => 'checkbox',
    '#title' => 'All email field contact forms',
    '#default_value' => $default,
  );
}

/**
 * Validate the site-wide contact page form submission.
 */
function email_contactform_form_validate($form, &$form_state) {
  if (!valid_email_address($form_state['values']['mail'])) {
    form_set_error('mail', t('You must enter a valid e-mail address.'));
  }
  if (preg_match("/\r|\n/", $form_state['values']['subject'])) {
    form_set_error('subject', t('The subject cannot contain linebreaks.'));
    watchdog('mail', 'Email injection exploit attempted in email form subject: ' . check_plain($form_state['values']['subject']), WATCHDOG_NOTICE);
  }
}

/**
 * Process the site-wide contact page form submission.
 */
function email_contactform_form_submit($form, &$form_state) {
  $object_type = $form_state['values']['object_type'];
  $object_id = $form_state['values']['object_id'];
  $field_name = $form_state['values']['field_name'];
  $email = $form_state['values']['email'];

  // Load entity
  $objects = entity_load($object_type, array($object_id));
  $object = $objects[$object_id];
  $object_info = entity_get_info($object_type);

  // E-mail address of the sender: as the form field is a text field,
  // all instances of \r and \n have been automatically stripped from it.

  $from = $form_state['values']['mail'];

  $params['object'] = $object;
  $params['subject'] = $form_state['values']['subject'];
  $params['name'] = $form_state['values']['name'];
  $params['message'] = $form_state['values']['message'];

  $path = '';
  if (isset($object_info['path callback']) && function_exists($object_info['path callback'])) {
    $path = $object_info['path callback']($object);
  }
  $params['url'] = url($path, array('absolute' => TRUE));

  // Send the e-mail to the recipients:
  backdrop_mail('email', 'contact', $email, language_default(), $params, $from);

  // Log the operation:
  flood_register_event('email');
  watchdog('mail', '%name-from sent an e-mail at %form.', array('%name-from' => $form_state['values']['name'], '%form' => url($_GET['q'], array('absolute' => TRUE))));

  backdrop_set_message(t('Your message has been sent.'));

  $form_state['redirect'] = $path;
  if (!empty($form_state['widget_settings']['redirection_to'])) {
    switch ($form_state['widget_settings']['redirection_to']) {
      case 'current':
        $form_state['redirect'] = current_path();
        break;
      case 'custom':
        $form_state['redirect'] = $form_state['widget_settings']['custom_path'];
        break;
      default:
        $form_state['redirect'] = $path;
        break;
    }
  }
}

/**
 * Implements hook_mail().
 */
function email_contactform_mail($key, &$message, $params) {
  $language = $message['language'];
  switch ($key) {
    case 'contact':
      // Compose the body:
      $message['body'][] = t('@name sent a message using the contact form at @url.', array('@name' => $params['name'], '@url' => $params['url']), array('langcode' => $language->language));
      $message['body'][] = $params['message'];
      $message['subject'] = "";

      // Include the title of the entity, if one exists
      $object = $params['object'];
      if (isset($object->title) && !empty($object->title)) {
        $message['subject'] = "[" . check_plain(preg_replace("/\r|\n/", '', $object->title)) . "]";
      }
      $message['subject'] .= " " . check_plain($params['subject']);
      break;
  }
}
